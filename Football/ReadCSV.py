#! /usr/bin/python3
import psycopg2
from sqlalchemy import create_engine
import numpy as np
import pandas as pd
from os import listdir
from multiprocessing import Pool

from Football.getters import set_last_matches
#from profilehooks import profile

p = Pool(7)
datadir = 'Data'


#@profile
def init_db():
    """Initiates the database. Transform and populate data from all CVS located in input folder"""
    csv_files = listdir(datadir)
    conn = psycopg2.connect(database="footdata", user="footdata")
    cur = conn.cursor()
    cur.execute('DROP TABLE IF EXISTS matches CASCADE;')
    cur.execute("""CREATE TABLE public.matches(
                match_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                date timestamp without time zone,
                home_team text,
                away_team text,
                fthg bigint,
                ftag bigint,
                ftr bigint,
                hthg bigint,
                htag bigint,
                htr bigint,
                b365h double precision,
                b365d double precision,
                b365a double precision,
                league text,
                country text,
                htftr bigint,
                CONSTRAINT date_home_uniq UNIQUE (date, home_team)
                )
                WITH (OIDS = FALSE);
                ALTER TABLE public.matches OWNER TO footdata;
                """
                )
    conn.commit()
    conn.close()
    conn = create_engine('postgresql://footdata@localhost:5432/footdata')

    for csv_file in csv_files:
        temp_frame = pd.read_csv(('%s/{0}' % datadir).format(csv_file))
        temp_frame.dropna(how='all', inplace=True)  # Remove empty rows
        temp_frame.dropna(axis=1, how='all', inplace=True)  # Remove empty columns
        temp_frame.dropna(subset=['HTR', 'FTR'], inplace=True)  # Remove matches without half time or full time results
        temp_frame['league'] = temp_frame['Div']  # Create new column for league name
        temp_frame['country'] = temp_frame['Div']  # Create new column for country name
        temp_frame.Date = p.map(convert_date, temp_frame.Date)
        temp_frame.country = p.map(country, temp_frame.country)
        temp_frame.league = p.map(league, temp_frame.league)
        temp_frame.HTR = p.map(h_d_a, temp_frame.HTR)
        temp_frame.FTR = p.map(h_d_a, temp_frame.FTR)
        temp_frame['HTFTR'] = p.map(int, temp_frame['HTR'].map(str) + temp_frame['FTR'].map(str))
        temp_frame.drop(['HS', 'AS', 'HST', 'AST', 'HF', 'AF', 'HC', 'AC', 'HY', 'AY', 'HR', 'AR', 'Div', 'BWH', 'BWD',
                         'BWA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA', 'PSH', 'PSD', 'PSA', 'WHH', 'WHD', 'WHA', 'VCH',
                         'VCD', 'VCA', 'Bb1X2', 'BbMxH', 'BbAvH', 'BbMxD', 'BbAvD', 'BbMxA', 'BbAvA', 'BbOU', 'BbMx>2.5',
                         'BbAv>2.5', 'BbMx<2.5', 'BbAv<2.5', 'BbAH', 'BbAHh', 'BbMxAHH', 'BbAvAHH', 'BbMxAHA', 'BbAvAHA',
                         'PSCH', 'PSCD', 'PSCA', 'BSH', 'BSD', 'BSA', 'Referee', 'GBH', 'GBA', 'GBD', 'SBH', 'SBD', 'SBA',
                         'SJH', 'SJD', 'SJA'], axis=1, inplace=True, errors='ignore')
        temp_frame.replace("", np.nan)
        temp_frame.columns = ['date', 'home_team', 'away_team', 'fthg', 'ftag', 'ftr', 'hthg', 'htag', 'htr', 'b365h', 'b365d','b365a', 'league', 'country', 'htftr']
        temp_frame.to_sql('matches', conn, if_exists='append', index=False)
    conn = psycopg2.connect(database="footdata", user="footdata")
    cur = conn.cursor()
    cur.execute("""CREATE INDEX match_id ON matches (match_id);
                CREATE INDEX home_team ON matches (home_team);
                CREATE INDEX away_team ON matches (away_team);
                CREATE INDEX date ON matches (date);"""
                )
    conn.commit()
    matches = pd.read_sql_query('SELECT * FROM matches', conn, index_col='match_id')
    set_last_matches(matches, conn)
    conn.close()


def set_additional_data():
    """Populate additional data to existing DB. Adds last matches and ids for country, league and teams"""
    conn = psycopg2.connect(database="footdata", user="footdata")
    cur = conn.cursor()
    matches = pd.read_sql_query('SELECT * FROM matches', conn)
    conn = create_engine('postgresql://footdata@localhost:5432/footdata')
    # matches['country_id'] = pd.Categorical((pd.factorize(matches.country)[0] + 1))
    # matches['league_id'] = pd.Categorical((pd.factorize(matches.league)[0] + 1))
    # matches['home_id'] = pd.Categorical((pd.factorize(matches.HomeTeam)[0] + 1))
    # unique_teams = matches[['HomeTeam', 'home_id']].drop_duplicates()
    # unique_teams.columns = ['AwayTeam', 'away']
    # unique_teams.to_sql('teams', conn, index=False, if_exists='replace')
    # matches = matches.merge(unique_teams, left_on='AwayTeam', right_on='AwayTeam')
    # matches = matches.rename(columns={'away': 'away_id'})
    set_last_matches(matches)
    #matches['last_home_ids_10'] = p.map(getters.get_10last_home, matches['Date'], matches['HomeTeam'])
    #matches['last_away_ids_10'] = p.map(getters.get_10last_away, matches['Date'], matches['AwayTeam'])
    #matches['last_home_ids_5'] = p.map(getters.get_5last_home, matches['Date'], matches['HomeTeam'])
    #matches['last_away_ids_5'] = p.map(getters.get_5last_away, matches['Date'], matches['AwayTeam'])
    #matches['last_direct'] = p.map(getters.get_last_direct, matches['Date'],zip(matches['HomeTeam'], matches['AwayTeam']))

    matches.to_sql('matches', conn, if_exists='append', Index=False)
    conn.close()
